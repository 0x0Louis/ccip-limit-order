// Generated by @wagmi/cli@1.3.0 on 22/07/2023 at 23:34:34
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CCIPLimitOrder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ccipLimitOrderABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "router", internalType: "address", type: "address" },
      { name: "chainSelector", internalType: "uint64", type: "uint64" },
      { name: "linkToken", internalType: "address", type: "address" },
      { name: "makerFee", internalType: "uint48", type: "uint48" },
      { name: "takerFee", internalType: "uint48", type: "uint48" },
      { name: "feeRecipient", internalType: "address", type: "address" },
    ],
  },
  {
    type: "error",
    inputs: [
      { name: "fee", internalType: "uint256", type: "uint256" },
      { name: "maxFee", internalType: "uint256", type: "uint256" },
    ],
    name: "FeeTooHigh",
  },
  {
    type: "error",
    inputs: [
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "fee", internalType: "uint256", type: "uint256" },
    ],
    name: "InsufficientNative",
  },
  { type: "error", inputs: [], name: "InvalidAddress" },
  {
    type: "error",
    inputs: [
      { name: "makerAmount", internalType: "uint256", type: "uint256" },
      { name: "takerAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidAmounts",
  },
  {
    type: "error",
    inputs: [
      { name: "feeRecipient", internalType: "address", type: "address" },
    ],
    name: "InvalidFeeRecipient",
  },
  {
    type: "error",
    inputs: [{ name: "feeToken", internalType: "address", type: "address" }],
    name: "InvalidFeeToken",
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidLength",
  },
  {
    type: "error",
    inputs: [{ name: "makerFee", internalType: "uint48", type: "uint48" }],
    name: "InvalidMakerFee",
  },
  {
    type: "error",
    inputs: [{ name: "router", internalType: "address", type: "address" }],
    name: "InvalidRouter",
  },
  {
    type: "error",
    inputs: [
      { name: "expectedSender", internalType: "bytes32", type: "bytes32" },
      { name: "actualSender", internalType: "bytes32", type: "bytes32" },
    ],
    name: "InvalidSender",
  },
  {
    type: "error",
    inputs: [
      {
        name: "expected",
        internalType: "enum CCIPLimitOrder.State",
        type: "uint8",
      },
      {
        name: "actual",
        internalType: "enum CCIPLimitOrder.State",
        type: "uint8",
      },
    ],
    name: "InvalidState",
  },
  {
    type: "error",
    inputs: [
      { name: "expectedTaker", internalType: "bytes32", type: "bytes32" },
      { name: "actualTaker", internalType: "bytes32", type: "bytes32" },
    ],
    name: "InvalidTaker",
  },
  {
    type: "error",
    inputs: [{ name: "takerFee", internalType: "uint48", type: "uint48" }],
    name: "InvalidTakerFee",
  },
  { type: "error", inputs: [], name: "NativeTransferFailed" },
  {
    type: "error",
    inputs: [
      { name: "feeRecipient", internalType: "address", type: "address" },
    ],
    name: "SameFeeRecipient",
  },
  {
    type: "error",
    inputs: [{ name: "makerFee", internalType: "uint48", type: "uint48" }],
    name: "SameMakerFee",
  },
  {
    type: "error",
    inputs: [{ name: "takerFee", internalType: "uint48", type: "uint48" }],
    name: "SameTakerFee",
  },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "bytes32", type: "bytes32" },
    ],
    name: "SameTargetContract",
  },
  {
    type: "error",
    inputs: [{ name: "status", internalType: "bool", type: "bool" }],
    name: "SameTrustedTokenStatus",
  },
  {
    type: "error",
    inputs: [{ name: "chainSelector", internalType: "uint64", type: "uint64" }],
    name: "UnsupportedChain",
  },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "UntrustedToken",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "action",
        internalType: "enum CCIPLimitOrder.CCIPAction",
        type: "uint8",
        indexed: false,
      },
      {
        name: "orderId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "CCIPActionReceived",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "feeRecipient",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "FeeRecipientSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "makerFee",
        internalType: "uint48",
        type: "uint48",
        indexed: false,
      },
    ],
    name: "MakerFeeSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "messageId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "MessageSent",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "orderId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "OrderCancelled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "orderId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "maker",
        internalType: "struct CCIPLimitOrder.Party",
        type: "tuple",
        components: [
          { name: "account", internalType: "bytes32", type: "bytes32" },
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
        indexed: false,
      },
      {
        name: "taker",
        internalType: "struct CCIPLimitOrder.Party",
        type: "tuple",
        components: [
          { name: "account", internalType: "bytes32", type: "bytes32" },
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
        indexed: false,
      },
    ],
    name: "OrderCreated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "orderId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "OrderFilled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferStarted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "takerFee",
        internalType: "uint48",
        type: "uint48",
        indexed: false,
      },
    ],
    name: "TakerFeeSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "chainSelector",
        internalType: "uint64",
        type: "uint64",
        indexed: true,
      },
      {
        name: "targetContract",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "TargetContractSet",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TokenStored",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TokenWithdrawn",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "chainSelector",
        internalType: "uint64",
        type: "uint64",
        indexed: true,
      },
      {
        name: "account",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "tokenAmounts",
        internalType: "struct Client.EVMTokenAmount[]",
        type: "tuple[]",
        components: [
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
        indexed: false,
      },
    ],
    name: "TokensSent",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "trusted", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "TrustedTokenSet",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BASIS_POINTS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_FEE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MIN_PENDING_FILL_DURATION",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "target", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "call",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "orderId", internalType: "uint256", type: "uint256" }],
    name: "cancelOrder",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "message",
        internalType: "struct Client.Any2EVMMessage",
        type: "tuple",
        components: [
          { name: "messageId", internalType: "bytes32", type: "bytes32" },
          {
            name: "sourceChainSelector",
            internalType: "uint64",
            type: "uint64",
          },
          { name: "sender", internalType: "bytes", type: "bytes" },
          { name: "data", internalType: "bytes", type: "bytes" },
          {
            name: "destTokenAmounts",
            internalType: "struct Client.EVMTokenAmount[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "ccipReceive",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "maker",
        internalType: "struct CCIPLimitOrder.Party",
        type: "tuple",
        components: [
          { name: "account", internalType: "bytes32", type: "bytes32" },
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "taker",
        internalType: "struct CCIPLimitOrder.Party",
        type: "tuple",
        components: [
          { name: "account", internalType: "bytes32", type: "bytes32" },
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "createOrder",
    outputs: [{ name: "orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "currentChainSelector",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "chainSelector", internalType: "uint64", type: "uint64" },
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "token", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "feeToken", internalType: "address", type: "address" },
      { name: "maxFee", internalType: "uint256", type: "uint256" },
      { name: "gasLimit", internalType: "uint256", type: "uint256" },
    ],
    name: "fillOrder",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "bytes32", type: "bytes32" },
      { name: "token", internalType: "address", type: "address" },
    ],
    name: "getBalance",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getFeeRecipient",
    outputs: [
      { name: "feeRecipient", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMakerFee",
    outputs: [{ name: "makerFee", internalType: "uint48", type: "uint48" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "orderId", internalType: "uint256", type: "uint256" }],
    name: "getOrder",
    outputs: [
      {
        name: "",
        internalType: "struct CCIPLimitOrder.Order",
        type: "tuple",
        components: [
          {
            name: "state",
            internalType: "enum CCIPLimitOrder.State",
            type: "uint8",
          },
          {
            name: "maker",
            internalType: "struct CCIPLimitOrder.Party",
            type: "tuple",
            components: [
              { name: "account", internalType: "bytes32", type: "bytes32" },
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          {
            name: "taker",
            internalType: "struct CCIPLimitOrder.Party",
            type: "tuple",
            components: [
              { name: "account", internalType: "bytes32", type: "bytes32" },
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getRouter",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTakerFee",
    outputs: [{ name: "takerFee", internalType: "uint48", type: "uint48" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "chainSelector", internalType: "uint64", type: "uint64" }],
    name: "getTargetContract",
    outputs: [
      { name: "targetContract", internalType: "bytes32", type: "bytes32" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "isTrustedToken",
    outputs: [{ name: "trusted", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "link",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "chainSelector", internalType: "uint64", type: "uint64" },
      { name: "account", internalType: "bytes32", type: "bytes32" },
      {
        name: "tokenAmounts",
        internalType: "struct Client.EVMTokenAmount[]",
        type: "tuple[]",
        components: [
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "feeToken", internalType: "address", type: "address" },
      { name: "maxFee", internalType: "uint256", type: "uint256" },
      { name: "gasLimit", internalType: "uint256", type: "uint256" },
    ],
    name: "sendTokens",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "feeRecipient", internalType: "address", type: "address" },
    ],
    name: "setFeeRecipient",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "makerFee", internalType: "uint48", type: "uint48" }],
    name: "setMakerFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "takerFee", internalType: "uint48", type: "uint48" }],
    name: "setTakerFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "chainSelector", internalType: "uint64", type: "uint64" },
      { name: "targetContract", internalType: "bytes32", type: "bytes32" },
    ],
    name: "setTargetContract",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "trusted", internalType: "bool", type: "bool" },
    ],
    name: "setTrustedToken",
    outputs: [],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "spender", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false },
    ],
    name: "Approval",
  },
  {
    type: "event",
    inputs: [
      { name: "from", type: "address", indexed: true },
      { name: "to", type: "address", indexed: true },
      { name: "value", type: "uint256", indexed: false },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "spender", type: "address" },
    ],
    name: "allowance",
    outputs: [{ type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "sender", type: "address" },
      { name: "recipient", type: "address" },
      { name: "amount", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "addedValue", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "subtractedValue", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "spender", type: "address", indexed: true },
      { name: "tokenId", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    inputs: [
      { name: "owner", type: "address", indexed: true },
      { name: "operator", type: "address", indexed: true },
      { name: "approved", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    inputs: [
      { name: "from", type: "address", indexed: true },
      { name: "to", type: "address", indexed: true },
      { name: "tokenId", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "spender", type: "address" },
      { name: "tokenId", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", type: "address" }],
    name: "balanceOf",
    outputs: [{ type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", type: "uint256" }],
    name: "getApproved",
    outputs: [{ type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "operator", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "owner", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "from", type: "address" },
      { name: "to", type: "address" },
      { name: "tokenId", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", type: "address" },
      { name: "to", type: "address" },
      { name: "id", type: "uint256" },
      { name: "data", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", type: "address" },
      { name: "approved", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "index", type: "uint256" }],
    name: "tokenByIndex",
    outputs: [{ type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", type: "address" },
      { name: "index", type: "uint256" },
    ],
    name: "tokenByIndex",
    outputs: [{ name: "tokenId", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "sender", type: "address" },
      { name: "recipient", type: "address" },
      { name: "tokenId", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__.
 */
export function useCcipLimitOrderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"BASIS_POINTS"`.
 */
export function useCcipLimitOrderBasisPoints<
  TFunctionName extends "BASIS_POINTS",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "BASIS_POINTS",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"MAX_FEE"`.
 */
export function useCcipLimitOrderMaxFee<
  TFunctionName extends "MAX_FEE",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "MAX_FEE",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"MIN_PENDING_FILL_DURATION"`.
 */
export function useCcipLimitOrderMinPendingFillDuration<
  TFunctionName extends "MIN_PENDING_FILL_DURATION",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "MIN_PENDING_FILL_DURATION",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"currentChainSelector"`.
 */
export function useCcipLimitOrderCurrentChainSelector<
  TFunctionName extends "currentChainSelector",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "currentChainSelector",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"getBalance"`.
 */
export function useCcipLimitOrderGetBalance<
  TFunctionName extends "getBalance",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "getBalance",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"getFeeRecipient"`.
 */
export function useCcipLimitOrderGetFeeRecipient<
  TFunctionName extends "getFeeRecipient",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "getFeeRecipient",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"getMakerFee"`.
 */
export function useCcipLimitOrderGetMakerFee<
  TFunctionName extends "getMakerFee",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "getMakerFee",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"getOrder"`.
 */
export function useCcipLimitOrderGetOrder<
  TFunctionName extends "getOrder",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "getOrder",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"getRouter"`.
 */
export function useCcipLimitOrderGetRouter<
  TFunctionName extends "getRouter",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "getRouter",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"getTakerFee"`.
 */
export function useCcipLimitOrderGetTakerFee<
  TFunctionName extends "getTakerFee",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "getTakerFee",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"getTargetContract"`.
 */
export function useCcipLimitOrderGetTargetContract<
  TFunctionName extends "getTargetContract",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "getTargetContract",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"isTrustedToken"`.
 */
export function useCcipLimitOrderIsTrustedToken<
  TFunctionName extends "isTrustedToken",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "isTrustedToken",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"link"`.
 */
export function useCcipLimitOrderLink<
  TFunctionName extends "link",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "link",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"owner"`.
 */
export function useCcipLimitOrderOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useCcipLimitOrderPendingOwner<
  TFunctionName extends "pendingOwner",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useCcipLimitOrderSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof ccipLimitOrderABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ccipLimitOrderABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof ccipLimitOrderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__.
 */
export function useCcipLimitOrderWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ccipLimitOrderABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, TFunctionName, TMode>({
    abi: ccipLimitOrderABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useCcipLimitOrderAcceptOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "acceptOwnership"
        >["request"]["abi"],
        "acceptOwnership",
        TMode
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<
        typeof ccipLimitOrderABI,
        "acceptOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "acceptOwnership";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "acceptOwnership", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "acceptOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"call"`.
 */
export function useCcipLimitOrderCall<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "call"
        >["request"]["abi"],
        "call",
        TMode
      > & { functionName?: "call" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "call", TMode> & {
        abi?: never;
        functionName?: "call";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "call", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "call",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"cancelOrder"`.
 */
export function useCcipLimitOrderCancelOrder<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "cancelOrder"
        >["request"]["abi"],
        "cancelOrder",
        TMode
      > & { functionName?: "cancelOrder" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "cancelOrder", TMode> & {
        abi?: never;
        functionName?: "cancelOrder";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "cancelOrder", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "cancelOrder",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"ccipReceive"`.
 */
export function useCcipLimitOrderCcipReceive<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "ccipReceive"
        >["request"]["abi"],
        "ccipReceive",
        TMode
      > & { functionName?: "ccipReceive" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "ccipReceive", TMode> & {
        abi?: never;
        functionName?: "ccipReceive";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "ccipReceive", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "ccipReceive",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"createOrder"`.
 */
export function useCcipLimitOrderCreateOrder<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "createOrder"
        >["request"]["abi"],
        "createOrder",
        TMode
      > & { functionName?: "createOrder" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "createOrder", TMode> & {
        abi?: never;
        functionName?: "createOrder";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "createOrder", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "createOrder",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"fillOrder"`.
 */
export function useCcipLimitOrderFillOrder<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "fillOrder"
        >["request"]["abi"],
        "fillOrder",
        TMode
      > & { functionName?: "fillOrder" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "fillOrder", TMode> & {
        abi?: never;
        functionName?: "fillOrder";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "fillOrder", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "fillOrder",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCcipLimitOrderRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof ccipLimitOrderABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "renounceOwnership", TMode>(
    {
      abi: ccipLimitOrderABI,
      functionName: "renounceOwnership",
      ...config,
    } as any
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"sendTokens"`.
 */
export function useCcipLimitOrderSendTokens<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "sendTokens"
        >["request"]["abi"],
        "sendTokens",
        TMode
      > & { functionName?: "sendTokens" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "sendTokens", TMode> & {
        abi?: never;
        functionName?: "sendTokens";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "sendTokens", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "sendTokens",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setFeeRecipient"`.
 */
export function useCcipLimitOrderSetFeeRecipient<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "setFeeRecipient"
        >["request"]["abi"],
        "setFeeRecipient",
        TMode
      > & { functionName?: "setFeeRecipient" }
    : UseContractWriteConfig<
        typeof ccipLimitOrderABI,
        "setFeeRecipient",
        TMode
      > & {
        abi?: never;
        functionName?: "setFeeRecipient";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "setFeeRecipient", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "setFeeRecipient",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setMakerFee"`.
 */
export function useCcipLimitOrderSetMakerFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "setMakerFee"
        >["request"]["abi"],
        "setMakerFee",
        TMode
      > & { functionName?: "setMakerFee" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "setMakerFee", TMode> & {
        abi?: never;
        functionName?: "setMakerFee";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "setMakerFee", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "setMakerFee",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setTakerFee"`.
 */
export function useCcipLimitOrderSetTakerFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "setTakerFee"
        >["request"]["abi"],
        "setTakerFee",
        TMode
      > & { functionName?: "setTakerFee" }
    : UseContractWriteConfig<typeof ccipLimitOrderABI, "setTakerFee", TMode> & {
        abi?: never;
        functionName?: "setTakerFee";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "setTakerFee", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "setTakerFee",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setTargetContract"`.
 */
export function useCcipLimitOrderSetTargetContract<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "setTargetContract"
        >["request"]["abi"],
        "setTargetContract",
        TMode
      > & { functionName?: "setTargetContract" }
    : UseContractWriteConfig<
        typeof ccipLimitOrderABI,
        "setTargetContract",
        TMode
      > & {
        abi?: never;
        functionName?: "setTargetContract";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "setTargetContract", TMode>(
    {
      abi: ccipLimitOrderABI,
      functionName: "setTargetContract",
      ...config,
    } as any
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setTrustedToken"`.
 */
export function useCcipLimitOrderSetTrustedToken<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "setTrustedToken"
        >["request"]["abi"],
        "setTrustedToken",
        TMode
      > & { functionName?: "setTrustedToken" }
    : UseContractWriteConfig<
        typeof ccipLimitOrderABI,
        "setTrustedToken",
        TMode
      > & {
        abi?: never;
        functionName?: "setTrustedToken";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "setTrustedToken", TMode>({
    abi: ccipLimitOrderABI,
    functionName: "setTrustedToken",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCcipLimitOrderTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ccipLimitOrderABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof ccipLimitOrderABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any
) {
  return useContractWrite<typeof ccipLimitOrderABI, "transferOwnership", TMode>(
    {
      abi: ccipLimitOrderABI,
      functionName: "transferOwnership",
      ...config,
    } as any
  );
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__.
 */
export function usePrepareCcipLimitOrderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareCcipLimitOrderAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "acceptOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"call"`.
 */
export function usePrepareCcipLimitOrderCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "call">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "call",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "call">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"cancelOrder"`.
 */
export function usePrepareCcipLimitOrderCancelOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "cancelOrder">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "cancelOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "cancelOrder">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"ccipReceive"`.
 */
export function usePrepareCcipLimitOrderCcipReceive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "ccipReceive">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "ccipReceive",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "ccipReceive">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"createOrder"`.
 */
export function usePrepareCcipLimitOrderCreateOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "createOrder">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "createOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "createOrder">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"fillOrder"`.
 */
export function usePrepareCcipLimitOrderFillOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "fillOrder">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "fillOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "fillOrder">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCcipLimitOrderRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ccipLimitOrderABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"sendTokens"`.
 */
export function usePrepareCcipLimitOrderSendTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "sendTokens">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "sendTokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "sendTokens">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setFeeRecipient"`.
 */
export function usePrepareCcipLimitOrderSetFeeRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setFeeRecipient">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "setFeeRecipient",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setFeeRecipient">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setMakerFee"`.
 */
export function usePrepareCcipLimitOrderSetMakerFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setMakerFee">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "setMakerFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setMakerFee">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setTakerFee"`.
 */
export function usePrepareCcipLimitOrderSetTakerFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setTakerFee">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "setTakerFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setTakerFee">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setTargetContract"`.
 */
export function usePrepareCcipLimitOrderSetTargetContract(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ccipLimitOrderABI,
      "setTargetContract"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "setTargetContract",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setTargetContract">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"setTrustedToken"`.
 */
export function usePrepareCcipLimitOrderSetTrustedToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setTrustedToken">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "setTrustedToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "setTrustedToken">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCcipLimitOrderTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ccipLimitOrderABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ccipLimitOrderABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ccipLimitOrderABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__.
 */
export function useCcipLimitOrderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"CCIPActionReceived"`.
 */
export function useCcipLimitOrderCcipActionReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "CCIPActionReceived">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "CCIPActionReceived",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "CCIPActionReceived">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"FeeRecipientSet"`.
 */
export function useCcipLimitOrderFeeRecipientSetEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "FeeRecipientSet">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "FeeRecipientSet",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "FeeRecipientSet">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"MakerFeeSet"`.
 */
export function useCcipLimitOrderMakerFeeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "MakerFeeSet">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "MakerFeeSet",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "MakerFeeSet">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"MessageSent"`.
 */
export function useCcipLimitOrderMessageSentEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "MessageSent">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "MessageSent",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "MessageSent">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"OrderCancelled"`.
 */
export function useCcipLimitOrderOrderCancelledEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "OrderCancelled">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "OrderCancelled",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "OrderCancelled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"OrderCreated"`.
 */
export function useCcipLimitOrderOrderCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "OrderCreated">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "OrderCreated",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "OrderCreated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"OrderFilled"`.
 */
export function useCcipLimitOrderOrderFilledEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "OrderFilled">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "OrderFilled",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "OrderFilled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useCcipLimitOrderOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ccipLimitOrderABI,
      "OwnershipTransferStarted"
    >,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "OwnershipTransferStarted",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "OwnershipTransferStarted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCcipLimitOrderOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"TakerFeeSet"`.
 */
export function useCcipLimitOrderTakerFeeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "TakerFeeSet">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "TakerFeeSet",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "TakerFeeSet">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"TargetContractSet"`.
 */
export function useCcipLimitOrderTargetContractSetEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "TargetContractSet">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "TargetContractSet",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "TargetContractSet">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"TokenStored"`.
 */
export function useCcipLimitOrderTokenStoredEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "TokenStored">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "TokenStored",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "TokenStored">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"TokenWithdrawn"`.
 */
export function useCcipLimitOrderTokenWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "TokenWithdrawn">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "TokenWithdrawn",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "TokenWithdrawn">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"TokensSent"`.
 */
export function useCcipLimitOrderTokensSentEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "TokensSent">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "TokensSent",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "TokensSent">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ccipLimitOrderABI}__ and `eventName` set to `"TrustedTokenSet"`.
 */
export function useCcipLimitOrderTrustedTokenSetEvent(
  config: Omit<
    UseContractEventConfig<typeof ccipLimitOrderABI, "TrustedTokenSet">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ccipLimitOrderABI,
    eventName: "TrustedTokenSet",
    ...config,
  } as UseContractEventConfig<typeof ccipLimitOrderABI, "TrustedTokenSet">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc20ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "approve", TMode>({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof erc20ABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "transfer", TMode>({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc20ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "transferFrom", TMode>({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "increaseAllowance", TMode> & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "increaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "decreaseAllowance", TMode> & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<typeof erc20ABI, "decreaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TFunctionName extends "getApproved",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "getApproved",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TFunctionName extends "isApprovedForAll",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TFunctionName extends "ownerOf",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "ownerOf",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721TokenByIndex<
  TFunctionName extends "tokenByIndex",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "tokenByIndex",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TFunctionName extends "tokenURI",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "tokenURI",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<typeof erc721ABI, TFunctionName, TMode>({
    abi: erc721ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc721ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<typeof erc721ABI, "approve", TMode>({
    abi: erc721ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          "safeTransferFrom"
        >["request"]["abi"],
        "safeTransferFrom",
        TMode
      > & { functionName?: "safeTransferFrom" }
    : UseContractWriteConfig<typeof erc721ABI, "safeTransferFrom", TMode> & {
        abi?: never;
        functionName?: "safeTransferFrom";
      } = {} as any
) {
  return useContractWrite<typeof erc721ABI, "safeTransferFrom", TMode>({
    abi: erc721ABI,
    functionName: "safeTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          "setApprovalForAll"
        >["request"]["abi"],
        "setApprovalForAll",
        TMode
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<typeof erc721ABI, "setApprovalForAll", TMode> & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any
) {
  return useContractWrite<typeof erc721ABI, "setApprovalForAll", TMode>({
    abi: erc721ABI,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc721ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<typeof erc721ABI, "transferFrom", TMode>({
    abi: erc721ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "safeTransferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "safeTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "safeTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "setApprovalForAll">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, "ApprovalForAll">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, "Transfer">);
}
